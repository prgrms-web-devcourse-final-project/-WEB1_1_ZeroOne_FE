name: Lighthouse CI
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Run server and Lighthouse CI
        run: |
          yarn dev & # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÑúÎ≤Ñ ÏãúÏûë
          sleep 10 # ÏÑúÎ≤ÑÍ∞Ä ÏôÑÏ†ÑÌûà ÏãúÏûëÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Format lighthouse score
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              if (!fs.existsSync('.lighthouseci/manifest.json')) {
                core.setFailed('manifest.json not found');
                return;
              }
              
              const rawData = fs.readFileSync('.lighthouseci/manifest.json', 'utf8');
              if (!rawData) {
                core.setFailed('manifest.json is empty');
                return;
              }
              
              const results = JSON.parse(rawData);
              let comments = "";

              results.forEach((result) => {
                const { summary, url, jsonPath } = result;
                const details = JSON.parse(fs.readFileSync(jsonPath));
                const { audits } = details;
                const formatResult = (res) => Math.round(res * 100);

                Object.keys(summary).forEach(
                  (key) => (summary[key] = formatResult(summary[key]))
                );

                const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

                const comment = [
                  `‚ö° Lighthouse report for ${url}`,
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                  `| ${score(summary.accessibility)} Accessibility | ${summary.accessibility} |`,
                  `| ${score(summary['best-practices'])} Best Practices | ${summary['best-practices']} |`,
                  `| ${score(summary.seo)} SEO | ${summary.seo} |`
                ].join("\n");

                const detail = [
                  `\n### Detailed Metrics`,
                  `| Metric | Value |`,
                  `| --- | --- |`,
                  `| ${score(audits["first-contentful-paint"].score * 100)} First Contentful Paint | ${audits["first-contentful-paint"].displayValue} |`,
                  `| ${score(audits["largest-contentful-paint"].score * 100)} Largest Contentful Paint | ${audits["largest-contentful-paint"].displayValue} |`,
                  `| ${score(audits["total-blocking-time"].score * 100)} Total Blocking Time | ${audits["total-blocking-time"].displayValue} |`,
                  `| ${score(audits["cumulative-layout-shift"].score * 100)} Cumulative Layout Shift | ${audits["cumulative-layout-shift"].displayValue} |`,
                  `| ${score(audits["speed-index"].score * 100)} Speed Index | ${audits["speed-index"].displayValue} |`
                ].join("\n");

                comments += comment + "\n" + detail + "\n\n---\n\n";
              });

              try {
                // PR Ïó¨Î∂Ä ÌôïÏù∏ (github.context ÎåÄÏã† process.env ÏÇ¨Ïö©)
                if (process.env.GITHUB_EVENT_NAME === 'pull_request') {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    body: comments
                  });
                } else if (process.env.GITHUB_EVENT_NAME === 'push') {
                  await github.rest.repos.createCommitComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    commit_sha: process.env.GITHUB_SHA,
                    body: comments
                  });
                }
                
                core.setOutput('comments', comments);
              } catch (error) {
                console.error('Failed to create comment:', error);
                core.setFailed(`Failed to create comment: ${error.message}`);
                return;
              }
              
            } catch (error) {
              core.setFailed(`Error: ${error.message}`);
              return;
            }
